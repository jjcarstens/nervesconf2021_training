# Scroll HAT Distribution

## Remote LED's

Now that you've dabbled with Erlang distribution with neighbors around the table,
let's make things a little more interesting üë∫

Another feature of distribution is baked right into `GenServer` naming. You
can target a module on a remote node with the `GenServer.*` functions.

Let's look at what neighbors you know about at your table:

<!-- livebook:{"force_markdown":true} -->

```elixir
Node.list()
```

<!-- livebook:{"break_markdown":true} -->

Now pick a neighbor from there

<!-- livebook:{"livebook_object":"cell_input","name":"neighbor","type":"text","value":""} -->

```elixir
neighbor = IO.gets("neighbor") |> String.trim() |> String.to_atom()

if neighbor != "" do
  # Make sure we're connected
  Node.ping(neighbor)

  GenServer.call({ScrollHat.Display, neighbor}, {:set_brightness, 5})
  GenServer.call({ScrollHat.Display, neighbor}, {:set_font, ScrollHat.Font.Unicode})
  GenServer.call({ScrollHat.Display, neighbor}, {:marquee, " howdy neighbor ", 150})
else
  "No neighbor selected - skipping"
end
```

Cool, eh?! üçª

The downside is that you would need to know the internal client specific code which
is typically internal API. However, you can also accomplish the same effect via
the Erlang [`:rpc`](https://erlang.org/doc/man/rpc.html) module and use the
user defined module and function API you already know

```elixir
:rpc.call(neighbor, ScrollHat.Display, :set_font, [ScrollHat.Font.Hachicro])
:rpc.call(neighbor, ScrollHat.Display, :marquee, [" Nerves ", 120])
```
