# networking

## VintageNet



```elixir
Kino.ETS.new(VintageNet)
```

```elixir
alias VegaLite, as: Vl

aps = Enum.map(VintageNetWiFi.quick_scan(), &Map.from_struct/1)

widget =
  Vl.new(config: [view: [stroke: nil], axis: [grid: false]])
  |> Vl.data_from_values(aps)
  |> Vl.concat(
    [
      Vl.new(title: "2.4 GHz", width: 300)
      |> Vl.encode_field(:x, "signal_percent", sort: :descending)
      |> Vl.encode_field(:y, "ssid", sort: :descending, axis: nil)
      # Don't display 5 GHz on this side
      |> Vl.encode_field(:color, "band",
        legend: nil,
        condition: [test: [not: [field: "band", equal: :wifi_2_4_ghz]], value: nil]
      )
      |> Vl.mark(:circle, tooltip: [:signal_percent]),

      # Centered Y-axis label
      Vl.new()
      |> Vl.mark(:text, align: :center)
      |> Vl.encode_field(:y, "ssid",
        type: :ordinal,
        title: nil,
        axis: [grid: false],
        sort: :descending
      ),
      Vl.new(title: "5 GHz", width: 300)
      |> Vl.encode_field(:x, "signal_percent")
      |> Vl.encode_field(:y, "ssid", sort: :descending, axis: nil)
      # Don't display 5 GHz on this side
      |> Vl.encode_field(:color, "band",
        legend: nil,
        condition: [test: [not: [field: "band", equal: :wifi_5_ghz]], value: nil]
      )
      |> Vl.mark(:circle, tooltip: true)
    ],
    :horizontal
  )
  |> Kino.VegaLite.new()
  |> tap(&Kino.render/1)

Kino.VegaLite.periodically(widget, 30000, 0, fn i ->
  aps = Enum.map(VintageNetWiFi.quick_scan(), &Map.from_struct/1)

  Kino.VegaLite.push_many(widget, aps)
  {:cont, i + 1}
end)
```
